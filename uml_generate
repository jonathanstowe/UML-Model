#!/usr/bin/env perl

use strict;
use warnings;

use File::Path;
use File::Spec;
use IO::File;

use Getopt::Std;

use Template;
use Template::Stash;

use UML::Model;

my $opts = {};
my $filename;

my $autotag = '# AUTOGENERATED';

if(!getopts('obp:l:t:', $opts) or !(($filename) = @ARGV) or !$opts->{p})
{
	print STDERR "$0: Usage:\n";
	print STDERR "$0 -b -p <prefix> [-l <libdir>] [-t <testdir>] <xmi file>\n";
	exit 255;
}

my $model = UML::Model->new($filename);

$Template::Stash::SCALAR_OPS->{'lc'} = sub { return lc shift };

my @include = '.';

if ( -d "tools/generate" )
{
	push @include, "tools/generate";
}
elsif ( -d "/opt/map/tools/generate" )
{
	push @include , "/opt/map/tools/generate";
}

my $tt = Template->new( { POST_CHOMP => 1, INCLUDE_PATH => \@include } );

my $prefix  = $opts->{p};
my $libdir  = $opts->{l} || 'lib';
my $testdir = $opts->{t} || 't';

my @packages = $model->packages();

while ( my $package = shift @packages )
{
	my ( $file, $fh );
   mkpath $prefix;
   $file = File::Spec->catfile( $prefix, 'Makefile.PL' );

	if (! -f $file || check_unchanged($file) )
	{
   	$fh = IO::File->new( $file, '>' );
   	$tt->process( 'makefile.pl.tt', 
	              	{ package => $package,libdir => $libdir,autotag => $autotag, testdir => $testdir },
					  	$fh )
     	|| die $tt->error();
	}

   next unless $package;

	my @inner = map { $_->inner_classes() } $package->classes();

   my @classes = $package->classes();
   while ( my $class = shift @classes )
   {
		my $backup = $opts->{b} || 0;
		my $exists = 0;
      my @path  = split '::', $class->full_name();
      my $fname = pop @path;
      my $dir   = File::Spec->catfile( $prefix, $libdir, @path );

      mkpath $dir;

      $file = File::Spec->catfile( $dir, $fname ) . '.pm';

      if ( -f $file )
      {
			$exists = 1;

			if ( $opts->{o} )
			{
				if (check_unchanged($file) )
				{
					$exists = 0;
					$backup = 0;
				}
				else
				{
					$backup = 1;
				}
			}

			if ( $backup )
			{
				$file .= ".gen";
			}
      }

		if (!$exists or $backup )
		{
      	$fh = IO::File->new( $file, '>' );
      	$tt->process( 'module.tt', { class => $class, autotag => $autotag }, $fh ) || die $tt->error();
		}

		$exists = 0;

      $dir = File::Spec->catfile( $prefix, $testdir );
      mkpath $dir;
      $fname = $class->full_name();
      $fname =~ s/::/_/g;
      $file = File::Spec->catfile( $dir, $fname ) . '.t';

      if ( -f $file )
      {
			$exists = 1;

			if ( $opts->{o} )
			{
				if (check_unchanged($file) )
				{
					$exists = 0;
					$backup = 0;
				}
				else
				{
					$backup = 1;
				}
			}

			if ( $backup )
			{
				$file .= ".gen";
			}
      }

		if (!$exists or $backup )
		{
      	$fh = IO::File->new( $file, '>' );
      	$tt->process( 'test.tt', { class => $class, autotag => $autotag }, $fh ) || die $tt->error();
		}

      push @classes, $class->inner_classes();
   }

   push @packages, $package->inner_packages();
}

sub check_unchanged
{
	my ( $filename ) = @_;

   open FH, '<',$filename or die "Couldn't open $filename for reading - $!\n";

	# only going to bother checking the first line

	my $line = <FH>;

	my $unchanged = 0;

	if ( $line && $line =~ /$autotag/ )
	{
		$unchanged = 1;
	}

	return $unchanged;
}
